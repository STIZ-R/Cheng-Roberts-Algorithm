import akka.actor.AbstractActor;
import akka.actor.ActorRef;
import akka.actor.Props;

/**
 * Classe d'Acteur: Noeud
 *
 * Elle permet de faire la repr√©sentation des noeuds au sein d'un Anneau
 * pour l'Algorithme de Chang Roberts
 *
 * Elle comporte les attributs suivants:
 *      -id: l'id du noeud
 *      -voisinDroite: le voisin direct du noeud courant
 *      -passif: savoir si le noeud transmet le message ou non
 *      -leader: savoir si le noeud est leader (ne sert pas √† grand chose actuellement)
 *
 */
public class Noeud extends AbstractActor {
    private final int id;
    private ActorRef voisinDroite;
    private boolean passif = false;
    private boolean leader = false;

    private Noeud(int id, ActorRef anneau) {
        this.id = id;
    }

    @Override
    public Receive createReceive() {
        return receiveBuilder()
                .match(Tour.class, msg -> tour(msg))
                .match(SetVoisinDroite.class, msg -> setVoisinDroite(msg))
                .build();
    }

    /**
     *  Si le noeud est d√©clar√© passif alors il envoie au voisin de droite le message re√ßu directement.
     *  Sinon
     *      Si l'ID re√ßu est sup√©rieur √† son ID
     *          Alors le noeud actuel devient passif
     *      Sinon si l'ID re√ßu est inf√©rieur √† l'ID du noeud actuel
     *          Alors on le d√©truit
     *      Sinon si l'ID re√ßu est √©gal √† l'ID du noeud actuel
     *          Alors on pr√©vient l'Anneau qu'il y a un Leader √©lu (noeud actuel)
     *
     *
     *
     *              D√©finition du CM:
     *
     *  Fonctionne sur un anneau dirig√©.
     *
     *  ‚Üí lesn≈ìuds d‚Äôun groupe d‚Äôinitiateur envoient un message au
     *  n≈ìud suivant (leur voisin) avec leur ID (ùëû)
     *
     *  quand un n≈ìud ùëù actif re√ßoit un message avec le contenu ùëû trois
     *  cas sont d√©finis :
     *  ‚Üí si ùëû <ùëù alors ùëù d√©truit le message
     *  ‚Üí si ùëû >ùëù alors ùëù devient passif et transmet le message
     *  ‚Üí si ùëû =ùëù alors ùëù devient le leader
     *
     *  Seul le message avec le plus grand id fera un tour comple
     *
     * @param msg Prend l'ID du noeud pr√©c√©dent afin de le comparer
     */
    public void tour(Tour msg) {
        if (this.passif) {
            System.out.println("Noeud " + this.id + " est d√©j√† passif: " + msg.id);
            voisinDroite.forward(msg, getContext());
        } else {
            if (msg.id > this.id) {
                System.out.println("Noeud " + this.id + " devient passif: " + msg.id);
                this.passif = true;
                voisinDroite.forward(msg, getContext());
            } else if (msg.id < this.id) {
                System.out.println("Destruction du message: " + this.id + " > " + msg.id);
            } else if (msg.id == this.id) {
                System.out.println("√âlection du leader: " + this.id);
                this.leader = true;
                getContext().parent().tell(new Anneau.LeaderElu(this.id), getSelf());

            }
        }
    }

    public void setVoisinDroite(SetVoisinDroite msg) {
        this.voisinDroite = msg.voisin;
    }

    public static Props props(int id, ActorRef anneau) {
        return Props.create(Noeud.class, id, anneau);
    }

    /**
     * Interface Utils afin de ne pas m√©langer les fonctions entre les Acteurs.
     */
    public interface Utils {}

    public static class SetVoisinDroite implements Utils {
        public final ActorRef voisin;
        public SetVoisinDroite(ActorRef voisin) {
            this.voisin = voisin;
        };
    }

    public static class Tour implements Utils{
        public final int id;
        public Tour(int id) {
            this.id = id;
        };
    }
}
